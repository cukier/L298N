CCS PCH C Compiler, Version 4.140, 22098               23-set-14 17:10

               Filename:   D:\Projetos\L298N\l298n.lst

               ROM used:   1108 bytes (3%)
                           Largest free fragment is 31656
               RAM used:   34 (2%) at main() level
                           45 (3%) worst case
               Stack:     4 worst case (2 in main + 2 for interrupts)

*
0000:  GOTO   036C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   012C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /* 
....................  * l298n.c 
....................  * 
....................  *  Created on: 22/09/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include<18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
.................... #list 
....................  
....................  
.................... #FUSES HS 
....................  
.................... #use delay(clock=15MHz) 
*
01DE:  CLRF   FEA
01E0:  MOVLW  20
01E2:  MOVWF  FE9
01E4:  MOVF   FEF,W
01E6:  BZ    0204
01E8:  MOVLW  04
01EA:  MOVWF  01
01EC:  CLRF   00
01EE:  DECFSZ 00,F
01F0:  BRA    01EE
01F2:  DECFSZ 01,F
01F4:  BRA    01EC
01F6:  MOVLW  DC
01F8:  MOVWF  00
01FA:  DECFSZ 00,F
01FC:  BRA    01FA
01FE:  NOP   
0200:  DECFSZ FEF,F
0202:  BRA    01E8
0204:  GOTO   03DC (RETURN)
.................... //#use delay(clock=9MHz) 
.................... #use rs232(xmit=PIN_C6, baud=9600) 
*
017C:  BCF    F94.6
017E:  BCF    F8B.6
0180:  MOVLW  08
0182:  MOVWF  01
0184:  BRA    0186
0186:  NOP   
0188:  BSF    01.7
018A:  BRA    01A8
018C:  BCF    01.7
018E:  RRCF   2B,F
0190:  BTFSC  FD8.0
0192:  BSF    F8B.6
0194:  BTFSS  FD8.0
0196:  BCF    F8B.6
0198:  BSF    01.6
019A:  BRA    01A8
019C:  BCF    01.6
019E:  DECFSZ 01,F
01A0:  BRA    018E
01A2:  BRA    01A4
01A4:  NOP   
01A6:  BSF    F8B.6
01A8:  MOVLW  7C
01AA:  MOVWF  FE9
01AC:  DECFSZ FE9,F
01AE:  BRA    01AC
01B0:  NOP   
01B2:  BTFSC  01.7
01B4:  BRA    018C
01B6:  BTFSC  01.6
01B8:  BRA    019C
01BA:  RETURN 0
....................  
.................... #define debouce 100 
.................... //#define tmr0reg 0 
.................... //#define tmr0reg 59285 
.................... #define clr_output	255 
....................  
.................... #define inc 200 
....................  
.................... #define R PIN_C0 
.................... #define S PIN_C1 
.................... #define T PIN_C2 
....................  
.................... #define pin_sobe PIN_B0 
.................... #define pin_desce PIN_B1 
....................  
.................... short ctrl_bto = TRUE; 
.................... short bto_sobe; 
.................... short bto_desce; 
.................... short dir; 
.................... short write; 
.................... short ctrl_inc; 
....................  
.................... int estado; 
....................  
.................... long timer0cont; 
.................... long tmr0reg; 
....................  
.................... void saida_onda(int i_estado) { 
.................... 	switch (i_estado) { 
*
00AE:  MOVF   2C,W
00B0:  XORLW  00
00B2:  BZ    00CA
00B4:  XORLW  01
00B6:  BZ    00D8
00B8:  XORLW  03
00BA:  BZ    00E6
00BC:  XORLW  01
00BE:  BZ    00F4
00C0:  XORLW  07
00C2:  BZ    0102
00C4:  XORLW  01
00C6:  BZ    0110
00C8:  BRA    011E
.................... 	case 0: 
.................... 		output_high(R); 
00CA:  BCF    F94.0
00CC:  BSF    F8B.0
.................... 		output_low(S); 
00CE:  BCF    F94.1
00D0:  BCF    F8B.1
.................... 		output_high(T); 
00D2:  BCF    F94.2
00D4:  BSF    F8B.2
.................... 		break; 
00D6:  BRA    012A
.................... 	case 1: 
.................... 		output_high(R); 
00D8:  BCF    F94.0
00DA:  BSF    F8B.0
.................... 		output_low(S); 
00DC:  BCF    F94.1
00DE:  BCF    F8B.1
.................... 		output_low(T); 
00E0:  BCF    F94.2
00E2:  BCF    F8B.2
.................... 		break; 
00E4:  BRA    012A
.................... 	case 2: 
.................... 		output_high(R); 
00E6:  BCF    F94.0
00E8:  BSF    F8B.0
.................... 		output_high(S); 
00EA:  BCF    F94.1
00EC:  BSF    F8B.1
.................... 		output_low(T); 
00EE:  BCF    F94.2
00F0:  BCF    F8B.2
.................... 		break; 
00F2:  BRA    012A
.................... 	case 3: 
.................... 		output_low(R); 
00F4:  BCF    F94.0
00F6:  BCF    F8B.0
.................... 		output_high(S); 
00F8:  BCF    F94.1
00FA:  BSF    F8B.1
.................... 		output_low(T); 
00FC:  BCF    F94.2
00FE:  BCF    F8B.2
.................... 		break; 
0100:  BRA    012A
.................... 	case 4: 
.................... 		output_low(R); 
0102:  BCF    F94.0
0104:  BCF    F8B.0
.................... 		output_high(S); 
0106:  BCF    F94.1
0108:  BSF    F8B.1
.................... 		output_high(T); 
010A:  BCF    F94.2
010C:  BSF    F8B.2
.................... 		break; 
010E:  BRA    012A
.................... 	case 5: 
.................... 		output_low(R); 
0110:  BCF    F94.0
0112:  BCF    F8B.0
.................... 		output_low(S); 
0114:  BCF    F94.1
0116:  BCF    F8B.1
.................... 		output_high(T); 
0118:  BCF    F94.2
011A:  BSF    F8B.2
.................... 		break; 
011C:  BRA    012A
.................... 	default: 
.................... 		output_low(R); 
011E:  BCF    F94.0
0120:  BCF    F8B.0
.................... 		output_low(S); 
0122:  BCF    F94.1
0124:  BCF    F8B.1
.................... 		output_low(T); 
0126:  BCF    F94.2
0128:  BCF    F8B.2
.................... 	} 
.................... } 
012A:  RETURN 0
....................  
.................... #INT_TIMER0 
.................... void isr_timer0() { 
....................  
.................... 	clear_interrupt(INT_TIMER0); 
012C:  BCF    FF2.2
.................... 	tmr0reg += inc; 
012E:  MOVLW  C8
0130:  ADDWF  1E,F
0132:  MOVLW  00
0134:  ADDWFC 1F,F
.................... 	set_timer0(tmr0reg); 
0136:  MOVFF  1F,FD7
013A:  MOVFF  1E,FD6
....................  
.................... 	if (dir) { 
013E:  BTFSS  1A.3
0140:  BRA    014E
.................... 		estado++; 
0142:  INCF   1B,F
.................... 		if (estado > 5) 
0144:  MOVF   1B,W
0146:  SUBLW  05
0148:  BC    014C
.................... 			estado = 0; 
014A:  CLRF   1B
.................... 	} else { 
014C:  BRA    015A
.................... 		estado--; 
014E:  DECF   1B,F
.................... 		if (estado > 5) 
0150:  MOVF   1B,W
0152:  SUBLW  05
0154:  BC    015A
.................... 			estado = 5; 
0156:  MOVLW  05
0158:  MOVWF  1B
.................... 	} 
....................  
.................... 	saida_onda(estado); 
015A:  MOVFF  1B,2C
015E:  RCALL  00AE
....................  
.................... 	write = TRUE; 
0160:  BSF    1A.4
.................... } 
....................  
0162:  BCF    FF2.2
0164:  GOTO   0060
.................... int main(void) { 
*
036C:  CLRF   FF8
036E:  BCF    FD0.7
0370:  BSF    07.7
0372:  CLRF   FEA
0374:  CLRF   FE9
0376:  BCF    F94.6
0378:  BSF    F8B.6
037A:  BSF    1A.0
037C:  BSF    FC1.0
037E:  BSF    FC1.1
0380:  BSF    FC1.2
0382:  BCF    FC1.3
....................  
.................... 	setup_timer_0(T0_INTERNAL | T0_DIV_1); 
0384:  MOVLW  88
0386:  MOVWF  FD5
.................... 	set_timer0(tmr0reg); 
0388:  MOVFF  1F,FD7
038C:  MOVFF  1E,FD6
....................  
.................... 	enable_interrupts(GLOBAL); 
0390:  MOVLW  C0
0392:  IORWF  FF2,F
0394:  CLRF   19
0396:  BTFSC  FF2.7
0398:  BSF    19.7
039A:  BCF    FF2.7
....................  
.................... 	saida_onda(clr_output); 
039C:  SETF   2C
039E:  RCALL  00AE
03A0:  BTFSC  19.7
03A2:  BSF    FF2.7
....................  
.................... 	printf("Done\n\r"); 
03A4:  MOVLW  68
03A6:  MOVWF  FF6
03A8:  MOVLW  01
03AA:  MOVWF  FF7
03AC:  BRA    01BC
....................  
.................... 	while (TRUE) { 
.................... 		bto_sobe = !input(pin_sobe); 
03AE:  BSF    F93.0
03B0:  BCF    1A.1
03B2:  BTFSS  F81.0
03B4:  BSF    1A.1
.................... 		bto_desce = !input(pin_desce); 
03B6:  BSF    F93.1
03B8:  BCF    1A.2
03BA:  BTFSS  F81.1
03BC:  BSF    1A.2
....................  
.................... 		if (bto_sobe ^ bto_desce) { 
03BE:  MOVLW  00
03C0:  BTFSC  1A.1
03C2:  MOVLW  01
03C4:  MOVWF  21
03C6:  MOVLW  00
03C8:  BTFSC  1A.2
03CA:  MOVLW  01
03CC:  XORWF  21,W
03CE:  BZ    03E8
.................... 			if (ctrl_bto) { 
03D0:  BTFSS  1A.0
03D2:  BRA    03E6
.................... 				ctrl_bto = FALSE; 
03D4:  BCF    1A.0
.................... 				delay_ms(debouce); 
03D6:  MOVLW  64
03D8:  MOVWF  20
03DA:  BRA    01DE
.................... 				clear_interrupt(INT_TIMER0); 
03DC:  BCF    FF2.2
.................... 				enable_interrupts(INT_TIMER0); 
03DE:  BSF    FF2.5
.................... 				dir = bto_sobe; 
03E0:  BCF    1A.3
03E2:  BTFSC  1A.1
03E4:  BSF    1A.3
.................... 			} 
.................... 		} else if (!ctrl_bto) { 
03E6:  BRA    0406
03E8:  BTFSC  1A.0
03EA:  BRA    0406
.................... 			ctrl_bto = TRUE; 
03EC:  BSF    1A.0
.................... 			disable_interrupts(INT_TIMER0); 
03EE:  BCF    FF2.5
.................... 			estado = 0; 
03F0:  CLRF   1B
03F2:  CLRF   19
03F4:  BTFSC  FF2.7
03F6:  BSF    19.7
03F8:  BCF    FF2.7
.................... 			saida_onda(clr_output); 
03FA:  SETF   2C
03FC:  RCALL  00AE
03FE:  BTFSC  19.7
0400:  BSF    FF2.7
.................... 			tmr0reg = 0; 
0402:  CLRF   1F
0404:  CLRF   1E
.................... 		} 
....................  
.................... 		if (write) { 
0406:  BTFSS  1A.4
0408:  BRA    0450
.................... 			write = FALSE; 
040A:  BCF    1A.4
.................... 			printf("%lu - %u\n\r", timer0cont++, estado); 
040C:  MOVFF  1D,03
0410:  MOVF   1C,W
0412:  INCF   1C,F
0414:  BTFSC  FD8.2
0416:  INCF   1D,F
0418:  MOVWF  20
041A:  MOVFF  03,21
041E:  MOVLW  10
0420:  MOVWF  FE9
0422:  MOVFF  03,23
0426:  MOVFF  20,22
042A:  BRA    0208
042C:  MOVLW  73
042E:  MOVWF  FF6
0430:  MOVLW  01
0432:  MOVWF  FF7
0434:  MOVLW  03
0436:  MOVWF  22
0438:  BRA    02BC
043A:  MOVFF  1B,22
043E:  MOVLW  1B
0440:  MOVWF  23
0442:  BRA    0304
0444:  MOVLW  0A
0446:  MOVWF  2B
0448:  RCALL  017C
044A:  MOVLW  0D
044C:  MOVWF  2B
044E:  RCALL  017C
.................... 		} 
.................... 	} 
0450:  BRA    03AE
....................  
.................... 	return 0; 
0452:  MOVLW  00
0454:  MOVWF  01
.................... } 
0456:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
