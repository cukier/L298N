CCS PCH C Compiler, Version 4.140, 22098               25-set-14 11:07

               Filename:   D:\Projetos\L298N\l298n.lst

               ROM used:   796 bytes (2%)
                           Largest free fragment is 31968
               RAM used:   42 (3%) at main() level
                           46 (3%) worst case
               Stack:     3 worst case (1 in main + 2 for interrupts)

*
0000:  GOTO   01DA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   012C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /* 
....................  * l298n.c 
....................  * 
....................  *  Created on: 22/09/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include<18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
.................... #list 
....................  
.................... #DEVICE ADC=10 
....................  
.................... #FUSES HS 
....................  
.................... #use delay(clock=15MHz) 
01B0:  CLRF   FEA
01B2:  MOVLW  28
01B4:  MOVWF  FE9
01B6:  MOVF   FEF,W
01B8:  BZ    01D6
01BA:  MOVLW  04
01BC:  MOVWF  01
01BE:  CLRF   00
01C0:  DECFSZ 00,F
01C2:  BRA    01C0
01C4:  DECFSZ 01,F
01C6:  BRA    01BE
01C8:  MOVLW  DC
01CA:  MOVWF  00
01CC:  DECFSZ 00,F
01CE:  BRA    01CC
01D0:  NOP   
01D2:  DECFSZ FEF,F
01D4:  BRA    01BA
01D6:  GOTO   02E6 (RETURN)
.................... //#use delay(clock=9MHz) 
.................... //#use rs232(xmit=PIN_C6, baud=9600) 
....................  
.................... #define debouce 100 
.................... //#define tmr0reg 0 
.................... //#define tmr0reg 59285 
.................... #define clr_output	255 
.................... #define inc 200 
.................... #define max 24 
....................  
.................... #define R PIN_C0 
.................... #define S PIN_C1 
.................... #define T PIN_C3 
....................  
.................... #define pin_sobe PIN_B0 
.................... #define pin_desce PIN_B1 
....................  
.................... short ctrl_bto = TRUE; 
.................... short bto_sobe; 
.................... short bto_desce; 
.................... short dir; 
.................... short write; 
.................... short ctrl_inc; 
....................  
.................... int estado; 
....................  
.................... long timer0cont; 
.................... long tmr0reg; 
.................... long adc; 
.................... long adcAux1; 
.................... long adcAux2; 
.................... long pwm_cont; 
....................  
.................... /*long pwm_duty[max] = { 512, 644, 768, 874, 955, 1006, 1023, 1006, 955, 874, 768, 
....................  644, 512, 379, 256, 150, 68, 17, 1, 17, 68, 150, 256, 379 }; 
....................  
....................  #INT_TIMER2 
....................  void isr_timer2() { 
....................  clear_interrupt(INT_TIMER2); 
....................  if (pwm_cont >= max) 
....................  pwm_cont = 0; 
....................  set_pwm1_duty(pwm_duty[pwm_cont++]); 
....................  }*/ 
....................  
.................... void saida_onda(int i_estado) { 
.................... 	switch (i_estado) { 
*
00AE:  MOVF   2D,W
00B0:  XORLW  00
00B2:  BZ    00CA
00B4:  XORLW  01
00B6:  BZ    00D8
00B8:  XORLW  03
00BA:  BZ    00E6
00BC:  XORLW  01
00BE:  BZ    00F4
00C0:  XORLW  07
00C2:  BZ    0102
00C4:  XORLW  01
00C6:  BZ    0110
00C8:  BRA    011E
.................... 	case 0: 
.................... 		output_high(R); 
00CA:  BCF    F94.0
00CC:  BSF    F8B.0
.................... 		output_low(S); 
00CE:  BCF    F94.1
00D0:  BCF    F8B.1
.................... 		output_high(T); 
00D2:  BCF    F94.3
00D4:  BSF    F8B.3
.................... 		break; 
00D6:  BRA    012A
.................... 	case 1: 
.................... 		output_high(R); 
00D8:  BCF    F94.0
00DA:  BSF    F8B.0
.................... 		output_low(S); 
00DC:  BCF    F94.1
00DE:  BCF    F8B.1
.................... 		output_low(T); 
00E0:  BCF    F94.3
00E2:  BCF    F8B.3
.................... 		break; 
00E4:  BRA    012A
.................... 	case 2: 
.................... 		output_high(R); 
00E6:  BCF    F94.0
00E8:  BSF    F8B.0
.................... 		output_high(S); 
00EA:  BCF    F94.1
00EC:  BSF    F8B.1
.................... 		output_low(T); 
00EE:  BCF    F94.3
00F0:  BCF    F8B.3
.................... 		break; 
00F2:  BRA    012A
.................... 	case 3: 
.................... 		output_low(R); 
00F4:  BCF    F94.0
00F6:  BCF    F8B.0
.................... 		output_high(S); 
00F8:  BCF    F94.1
00FA:  BSF    F8B.1
.................... 		output_low(T); 
00FC:  BCF    F94.3
00FE:  BCF    F8B.3
.................... 		break; 
0100:  BRA    012A
.................... 	case 4: 
.................... 		output_low(R); 
0102:  BCF    F94.0
0104:  BCF    F8B.0
.................... 		output_high(S); 
0106:  BCF    F94.1
0108:  BSF    F8B.1
.................... 		output_high(T); 
010A:  BCF    F94.3
010C:  BSF    F8B.3
.................... 		break; 
010E:  BRA    012A
.................... 	case 5: 
.................... 		output_low(R); 
0110:  BCF    F94.0
0112:  BCF    F8B.0
.................... 		output_low(S); 
0114:  BCF    F94.1
0116:  BCF    F8B.1
.................... 		output_high(T); 
0118:  BCF    F94.3
011A:  BSF    F8B.3
.................... 		break; 
011C:  BRA    012A
.................... 	default: 
.................... 		output_low(R); 
011E:  BCF    F94.0
0120:  BCF    F8B.0
.................... 		output_low(S); 
0122:  BCF    F94.1
0124:  BCF    F8B.1
.................... 		output_low(T); 
0126:  BCF    F94.3
0128:  BCF    F8B.3
.................... 	} 
.................... } 
012A:  RETURN 0
....................  
.................... #INT_TIMER0 
.................... void isr_timer0() { 
....................  
.................... 	clear_interrupt(INT_TIMER0); 
012C:  BCF    FF2.2
.................... 	set_timer0(tmr0reg); 
012E:  MOVFF  1F,FD7
0132:  MOVFF  1E,FD6
....................  
.................... 	if (dir) { 
0136:  BTFSS  1A.3
0138:  BRA    0146
.................... 		estado++; 
013A:  INCF   1B,F
.................... 		if (estado > 5) 
013C:  MOVF   1B,W
013E:  SUBLW  05
0140:  BC    0144
.................... 			estado = 0; 
0142:  CLRF   1B
.................... 	} else { 
0144:  BRA    0152
.................... 		estado--; 
0146:  DECF   1B,F
.................... 		if (estado > 5) 
0148:  MOVF   1B,W
014A:  SUBLW  05
014C:  BC    0152
.................... 			estado = 5; 
014E:  MOVLW  05
0150:  MOVWF  1B
.................... 	} 
....................  
.................... 	saida_onda(estado); 
0152:  MOVFF  1B,2D
0156:  RCALL  00AE
.................... } 
....................  
0158:  BCF    FF2.2
015A:  GOTO   0060
.................... long le_canal(int channel) { 
.................... 	set_adc_channel(channel); 
015E:  RLCF   28,W
0160:  MOVWF  00
0162:  RLCF   00,F
0164:  RLCF   00,F
0166:  MOVLW  F8
0168:  ANDWF  00,F
016A:  MOVF   FC2,W
016C:  ANDLW  C7
016E:  IORWF  00,W
0170:  MOVWF  FC2
.................... 	delay_us(40); 
0172:  MOVLW  31
0174:  MOVWF  00
0176:  DECFSZ 00,F
0178:  BRA    0176
017A:  BRA    017C
.................... 	return read_adc(); 
017C:  BSF    FC2.2
017E:  BTFSC  FC2.2
0180:  BRA    017E
0182:  MOVFF  FC4,03
0186:  MOVFF  FC3,01
018A:  MOVFF  FC4,02
.................... } 
018E:  RETURN 0
....................  
.................... int main(void) { 
*
01DA:  CLRF   FF8
01DC:  BCF    FD0.7
01DE:  BSF    07.7
01E0:  CLRF   FEA
01E2:  CLRF   FE9
01E4:  BSF    1A.0
01E6:  BSF    FC1.0
01E8:  BSF    FC1.1
01EA:  BSF    FC1.2
01EC:  BCF    FC1.3
....................  
.................... 	setup_adc(ADC_CLOCK_INTERNAL); 
01EE:  BCF    FC1.6
01F0:  BSF    FC2.6
01F2:  BSF    FC2.7
01F4:  BSF    FC1.7
01F6:  BSF    FC2.0
.................... 	setup_adc_ports(AN0_AN1_AN3); 
01F8:  BCF    FC1.0
01FA:  BCF    FC1.1
01FC:  BSF    FC1.2
01FE:  BCF    FC1.3
....................  
.................... 	setup_timer_0(T0_INTERNAL | T0_DIV_4); 
0200:  MOVLW  81
0202:  MOVWF  FD5
.................... 	set_timer0(tmr0reg); 
0204:  MOVFF  1F,FD7
0208:  MOVFF  1E,FD6
....................  
.................... 	setup_timer_2(T2_DIV_BY_1, 0xFF, 16); 
020C:  MOVLW  78
020E:  IORLW  04
0210:  MOVWF  FCA
0212:  MOVLW  FF
0214:  MOVWF  FCB
....................  
.................... 	setup_ccp1(CCP_OFF); 
0216:  MOVLW  F0
0218:  ANDWF  FBD,F
.................... 	set_pwm1_duty(512); 
021A:  MOVLW  80
021C:  MOVWF  FBE
021E:  MOVF   FBD,W
0220:  ANDLW  CF
0222:  MOVWF  FBD
....................  
.................... //	clear_interrupt(INT_TIMER2); 
.................... //	enable_interrupts(INT_TIMER2); 
.................... 	enable_interrupts(GLOBAL); 
0224:  MOVLW  C0
0226:  IORWF  FF2,F
0228:  CLRF   19
022A:  BTFSC  FF2.7
022C:  BSF    19.7
022E:  BCF    FF2.7
....................  
.................... 	saida_onda(clr_output); 
0230:  SETF   2D
0232:  RCALL  00AE
0234:  BTFSC  19.7
0236:  BSF    FF2.7
....................  
.................... 	while (TRUE) { 
....................  
.................... 		adc = le_canal(0); 
0238:  CLRF   28
023A:  RCALL  015E
023C:  MOVFF  02,21
0240:  MOVFF  01,20
....................  
.................... 		if (adc != adcAux1) { 
0244:  MOVF   22,W
0246:  SUBWF  20,W
0248:  BNZ   0250
024A:  MOVF   23,W
024C:  SUBWF  21,W
024E:  BZ    0270
.................... 			adcAux1 = adc; 
0250:  MOVFF  21,23
0254:  MOVFF  20,22
.................... 			tmr0reg = (long) 65535 / 1024 * adc; 
0258:  CLRF   29
025A:  MOVLW  3F
025C:  MOVWF  28
025E:  MOVFF  21,2B
0262:  MOVFF  20,2A
0266:  BRA    0190
0268:  MOVFF  02,1F
026C:  MOVFF  01,1E
.................... 		} 
....................  
.................... 		adc = le_canal(1); 
0270:  MOVLW  01
0272:  MOVWF  28
0274:  RCALL  015E
0276:  MOVFF  02,21
027A:  MOVFF  01,20
....................  
.................... 		if (adc != adcAux2) { 
027E:  MOVF   24,W
0280:  SUBWF  20,W
0282:  BNZ   028A
0284:  MOVF   25,W
0286:  SUBWF  21,W
0288:  BZ    02B8
.................... 			adcAux2 = adc; 
028A:  MOVFF  21,25
028E:  MOVFF  20,24
.................... 			set_pwm1_duty(adc); 
0292:  MOVFF  21,02
0296:  MOVFF  20,01
029A:  RRCF   02,F
029C:  RRCF   01,F
029E:  RRCF   02,F
02A0:  RRCF   01,F
02A2:  RRCF   02,F
02A4:  MOVFF  01,FBE
02A8:  RRCF   02,F
02AA:  RRCF   02,W
02AC:  ANDLW  30
02AE:  MOVWF  00
02B0:  MOVF   FBD,W
02B2:  ANDLW  CF
02B4:  IORWF  00,W
02B6:  MOVWF  FBD
.................... 		} 
....................  
.................... 		bto_sobe = !input(pin_sobe); 
02B8:  BSF    F93.0
02BA:  BCF    1A.1
02BC:  BTFSS  F81.0
02BE:  BSF    1A.1
.................... 		bto_desce = !input(pin_desce); 
02C0:  BSF    F93.1
02C2:  BCF    1A.2
02C4:  BTFSS  F81.1
02C6:  BSF    1A.2
....................  
.................... 		if (bto_sobe ^ bto_desce) { 
02C8:  MOVLW  00
02CA:  BTFSC  1A.1
02CC:  MOVLW  01
02CE:  MOVWF  29
02D0:  MOVLW  00
02D2:  BTFSC  1A.2
02D4:  MOVLW  01
02D6:  XORWF  29,W
02D8:  BZ    02FA
.................... 			if (ctrl_bto) { 
02DA:  BTFSS  1A.0
02DC:  BRA    02F8
.................... 				ctrl_bto = FALSE; 
02DE:  BCF    1A.0
.................... 				delay_ms(debouce); 
02E0:  MOVLW  64
02E2:  MOVWF  28
02E4:  BRA    01B0
.................... 				clear_interrupt(INT_TIMER0); 
02E6:  BCF    FF2.2
.................... 				enable_interrupts(INT_TIMER0); 
02E8:  BSF    FF2.5
.................... 				dir = bto_sobe; 
02EA:  BCF    1A.3
02EC:  BTFSC  1A.1
02EE:  BSF    1A.3
.................... 				setup_ccp1(CCP_PWM); 
02F0:  BCF    F94.2
02F2:  BCF    F8B.2
02F4:  MOVLW  0C
02F6:  MOVWF  FBD
.................... 			} 
.................... 		} else if (!ctrl_bto) { 
02F8:  BRA    0318
02FA:  BTFSC  1A.0
02FC:  BRA    0318
.................... 			ctrl_bto = TRUE; 
02FE:  BSF    1A.0
.................... 			disable_interrupts(INT_TIMER0); 
0300:  BCF    FF2.5
.................... 			estado = 0; 
0302:  CLRF   1B
0304:  CLRF   19
0306:  BTFSC  FF2.7
0308:  BSF    19.7
030A:  BCF    FF2.7
.................... 			saida_onda(clr_output); 
030C:  SETF   2D
030E:  RCALL  00AE
0310:  BTFSC  19.7
0312:  BSF    FF2.7
.................... 			setup_ccp1(CCP_OFF); 
0314:  MOVLW  F0
0316:  ANDWF  FBD,F
.................... 		} 
.................... 	} 
0318:  BRA    0238
....................  
.................... 	return 0; 
031A:  MOVLW  00
031C:  MOVWF  01
.................... } 
031E:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
