CCS PCH C Compiler, Version 4.140, 22098               24-set-14 14:23

               Filename:   D:\Projetos\L298N\l298n.lst

               ROM used:   1282 bytes (4%)
                           Largest free fragment is 31482
               RAM used:   38 (2%) at main() level
                           49 (3%) worst case
               Stack:     4 worst case (2 in main + 2 for interrupts)

*
0000:  GOTO   039E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   012C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /* 
....................  * l298n.c 
....................  * 
....................  *  Created on: 22/09/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include<18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
.................... #list 
....................  
.................... #DEVICE ADC=10 
....................  
.................... #FUSES HS 
....................  
.................... #use delay(clock=15MHz) 
*
02E4:  CLRF   FEA
02E6:  MOVLW  24
02E8:  MOVWF  FE9
02EA:  MOVF   FEF,W
02EC:  BZ    030A
02EE:  MOVLW  04
02F0:  MOVWF  01
02F2:  CLRF   00
02F4:  DECFSZ 00,F
02F6:  BRA    02F4
02F8:  DECFSZ 01,F
02FA:  BRA    02F2
02FC:  MOVLW  DC
02FE:  MOVWF  00
0300:  DECFSZ 00,F
0302:  BRA    0300
0304:  NOP   
0306:  DECFSZ FEF,F
0308:  BRA    02EE
030A:  GOTO   048E (RETURN)
.................... //#use delay(clock=9MHz) 
.................... #use rs232(xmit=PIN_C6, baud=9600) 
*
0192:  BCF    F94.6
0194:  BCF    F8B.6
0196:  MOVLW  08
0198:  MOVWF  01
019A:  BRA    019C
019C:  NOP   
019E:  BSF    01.7
01A0:  BRA    01BE
01A2:  BCF    01.7
01A4:  RRCF   2F,F
01A6:  BTFSC  FD8.0
01A8:  BSF    F8B.6
01AA:  BTFSS  FD8.0
01AC:  BCF    F8B.6
01AE:  BSF    01.6
01B0:  BRA    01BE
01B2:  BCF    01.6
01B4:  DECFSZ 01,F
01B6:  BRA    01A4
01B8:  BRA    01BA
01BA:  NOP   
01BC:  BSF    F8B.6
01BE:  MOVLW  7C
01C0:  MOVWF  FE9
01C2:  DECFSZ FE9,F
01C4:  BRA    01C2
01C6:  NOP   
01C8:  BTFSC  01.7
01CA:  BRA    01A2
01CC:  BTFSC  01.6
01CE:  BRA    01B2
01D0:  RETURN 0
....................  
.................... #define debouce 100 
.................... //#define tmr0reg 0 
.................... //#define tmr0reg 59285 
.................... #define clr_output	255 
....................  
.................... #define inc 200 
....................  
.................... #define R PIN_C0 
.................... #define S PIN_C1 
.................... #define T PIN_C2 
....................  
.................... #define pin_sobe PIN_B0 
.................... #define pin_desce PIN_B1 
....................  
.................... short ctrl_bto = TRUE; 
.................... short bto_sobe; 
.................... short bto_desce; 
.................... short dir; 
.................... short write; 
.................... short ctrl_inc; 
....................  
.................... int estado; 
....................  
.................... long timer0cont; 
.................... long tmr0reg; 
.................... long adc; 
.................... long adcAux; 
....................  
.................... void saida_onda(int i_estado) { 
.................... 	switch (i_estado) { 
*
00AE:  MOVF   30,W
00B0:  XORLW  00
00B2:  BZ    00CA
00B4:  XORLW  01
00B6:  BZ    00D8
00B8:  XORLW  03
00BA:  BZ    00E6
00BC:  XORLW  01
00BE:  BZ    00F4
00C0:  XORLW  07
00C2:  BZ    0102
00C4:  XORLW  01
00C6:  BZ    0110
00C8:  BRA    011E
.................... 	case 0: 
.................... 		output_high(R); 
00CA:  BCF    F94.0
00CC:  BSF    F8B.0
.................... 		output_low(S); 
00CE:  BCF    F94.1
00D0:  BCF    F8B.1
.................... 		output_high(T); 
00D2:  BCF    F94.2
00D4:  BSF    F8B.2
.................... 		break; 
00D6:  BRA    012A
.................... 	case 1: 
.................... 		output_high(R); 
00D8:  BCF    F94.0
00DA:  BSF    F8B.0
.................... 		output_low(S); 
00DC:  BCF    F94.1
00DE:  BCF    F8B.1
.................... 		output_low(T); 
00E0:  BCF    F94.2
00E2:  BCF    F8B.2
.................... 		break; 
00E4:  BRA    012A
.................... 	case 2: 
.................... 		output_high(R); 
00E6:  BCF    F94.0
00E8:  BSF    F8B.0
.................... 		output_high(S); 
00EA:  BCF    F94.1
00EC:  BSF    F8B.1
.................... 		output_low(T); 
00EE:  BCF    F94.2
00F0:  BCF    F8B.2
.................... 		break; 
00F2:  BRA    012A
.................... 	case 3: 
.................... 		output_low(R); 
00F4:  BCF    F94.0
00F6:  BCF    F8B.0
.................... 		output_high(S); 
00F8:  BCF    F94.1
00FA:  BSF    F8B.1
.................... 		output_low(T); 
00FC:  BCF    F94.2
00FE:  BCF    F8B.2
.................... 		break; 
0100:  BRA    012A
.................... 	case 4: 
.................... 		output_low(R); 
0102:  BCF    F94.0
0104:  BCF    F8B.0
.................... 		output_high(S); 
0106:  BCF    F94.1
0108:  BSF    F8B.1
.................... 		output_high(T); 
010A:  BCF    F94.2
010C:  BSF    F8B.2
.................... 		break; 
010E:  BRA    012A
.................... 	case 5: 
.................... 		output_low(R); 
0110:  BCF    F94.0
0112:  BCF    F8B.0
.................... 		output_low(S); 
0114:  BCF    F94.1
0116:  BCF    F8B.1
.................... 		output_high(T); 
0118:  BCF    F94.2
011A:  BSF    F8B.2
.................... 		break; 
011C:  BRA    012A
.................... 	default: 
.................... 		output_low(R); 
011E:  BCF    F94.0
0120:  BCF    F8B.0
.................... 		output_low(S); 
0122:  BCF    F94.1
0124:  BCF    F8B.1
.................... 		output_low(T); 
0126:  BCF    F94.2
0128:  BCF    F8B.2
.................... 	} 
.................... } 
012A:  RETURN 0
....................  
.................... #INT_TIMER0 
.................... void isr_timer0() { 
....................  
.................... 	clear_interrupt(INT_TIMER0); 
012C:  BCF    FF2.2
.................... 	set_timer0(tmr0reg); 
012E:  MOVFF  1F,FD7
0132:  MOVFF  1E,FD6
....................  
.................... 	if (dir) { 
0136:  BTFSS  1A.3
0138:  BRA    0146
.................... 		estado++; 
013A:  INCF   1B,F
.................... 		if (estado > 5) 
013C:  MOVF   1B,W
013E:  SUBLW  05
0140:  BC    0144
.................... 			estado = 0; 
0142:  CLRF   1B
.................... 	} else { 
0144:  BRA    0152
.................... 		estado--; 
0146:  DECF   1B,F
.................... 		if (estado > 5) 
0148:  MOVF   1B,W
014A:  SUBLW  05
014C:  BC    0152
.................... 			estado = 5; 
014E:  MOVLW  05
0150:  MOVWF  1B
.................... 	} 
....................  
.................... 	saida_onda(estado); 
0152:  MOVFF  1B,30
0156:  RCALL  00AE
....................  
.................... 	write = TRUE; 
0158:  BSF    1A.4
.................... } 
....................  
015A:  BCF    FF2.2
015C:  GOTO   0060
.................... int main(void) { 
*
039E:  CLRF   FF8
03A0:  BCF    FD0.7
03A2:  BSF    07.7
03A4:  CLRF   FEA
03A6:  CLRF   FE9
03A8:  BCF    F94.6
03AA:  BSF    F8B.6
03AC:  BSF    1A.0
03AE:  BSF    FC1.0
03B0:  BSF    FC1.1
03B2:  BSF    FC1.2
03B4:  BCF    FC1.3
....................  
.................... 	setup_adc(ADC_CLOCK_INTERNAL); 
03B6:  BCF    FC1.6
03B8:  BSF    FC2.6
03BA:  BSF    FC2.7
03BC:  BSF    FC1.7
03BE:  BSF    FC2.0
.................... 	setup_adc_ports(AN0); 
03C0:  BCF    FC1.0
03C2:  BSF    FC1.1
03C4:  BSF    FC1.2
03C6:  BSF    FC1.3
.................... 	set_adc_channel(0); 
03C8:  MOVLW  00
03CA:  MOVWF  01
03CC:  MOVF   FC2,W
03CE:  ANDLW  C7
03D0:  IORWF  01,W
03D2:  MOVWF  FC2
....................  
.................... 	setup_timer_0(T0_INTERNAL | T0_DIV_8); 
03D4:  MOVLW  82
03D6:  MOVWF  FD5
.................... 	set_timer0(tmr0reg); 
03D8:  MOVFF  1F,FD7
03DC:  MOVFF  1E,FD6
....................  
.................... 	enable_interrupts(GLOBAL); 
03E0:  MOVLW  C0
03E2:  IORWF  FF2,F
03E4:  CLRF   19
03E6:  BTFSC  FF2.7
03E8:  BSF    19.7
03EA:  BCF    FF2.7
....................  
.................... 	saida_onda(clr_output); 
03EC:  SETF   30
03EE:  RCALL  00AE
03F0:  BTFSC  19.7
03F2:  BSF    FF2.7
....................  
.................... 	printf("Done\n\r"); 
03F4:  MOVLW  60
03F6:  MOVWF  FF6
03F8:  MOVLW  01
03FA:  MOVWF  FF7
03FC:  BRA    01D2
....................  
.................... 	while (TRUE) { 
....................  
.................... 		adc = read_adc(); 
03FE:  BSF    FC2.2
0400:  BTFSC  FC2.2
0402:  BRA    0400
0404:  MOVFF  FC3,20
0408:  MOVFF  FC4,21
....................  
.................... 		if (adc != adcAux) { 
040C:  MOVF   22,W
040E:  SUBWF  20,W
0410:  BNZ   0418
0412:  MOVF   23,W
0414:  SUBWF  21,W
0416:  BZ    0460
.................... 			adcAux = adc; 
0418:  MOVFF  21,23
041C:  MOVFF  20,22
.................... 			tmr0reg = (long) 65535 / 1024 * adc; 
0420:  CLRF   25
0422:  MOVLW  3F
0424:  MOVWF  24
0426:  MOVFF  21,27
042A:  MOVFF  20,26
042E:  BRA    01F4
0430:  MOVFF  02,1F
0434:  MOVFF  01,1E
.................... 			printf("Tmr0 reg alterado para %lu\n\r", adc); 
0438:  MOVLW  68
043A:  MOVWF  FF6
043C:  MOVLW  01
043E:  MOVWF  FF7
0440:  MOVLW  17
0442:  MOVWF  26
0444:  RCALL  0214
0446:  MOVLW  10
0448:  MOVWF  FE9
044A:  MOVFF  21,27
044E:  MOVFF  20,26
0452:  RCALL  0232
0454:  MOVLW  0A
0456:  MOVWF  2F
0458:  RCALL  0192
045A:  MOVLW  0D
045C:  MOVWF  2F
045E:  RCALL  0192
.................... 		} 
....................  
.................... 		bto_sobe = !input(pin_sobe); 
0460:  BSF    F93.0
0462:  BCF    1A.1
0464:  BTFSS  F81.0
0466:  BSF    1A.1
.................... 		bto_desce = !input(pin_desce); 
0468:  BSF    F93.1
046A:  BCF    1A.2
046C:  BTFSS  F81.1
046E:  BSF    1A.2
....................  
.................... 		if (bto_sobe ^ bto_desce) { 
0470:  MOVLW  00
0472:  BTFSC  1A.1
0474:  MOVLW  01
0476:  MOVWF  25
0478:  MOVLW  00
047A:  BTFSC  1A.2
047C:  MOVLW  01
047E:  XORWF  25,W
0480:  BZ    049A
.................... 			if (ctrl_bto) { 
0482:  BTFSS  1A.0
0484:  BRA    0498
.................... 				ctrl_bto = FALSE; 
0486:  BCF    1A.0
.................... 				delay_ms(debouce); 
0488:  MOVLW  64
048A:  MOVWF  24
048C:  BRA    02E4
.................... 				clear_interrupt(INT_TIMER0); 
048E:  BCF    FF2.2
.................... 				enable_interrupts(INT_TIMER0); 
0490:  BSF    FF2.5
.................... 				dir = bto_sobe; 
0492:  BCF    1A.3
0494:  BTFSC  1A.1
0496:  BSF    1A.3
.................... 			} 
.................... 		} else if (!ctrl_bto) { 
0498:  BRA    04B4
049A:  BTFSC  1A.0
049C:  BRA    04B4
.................... 			ctrl_bto = TRUE; 
049E:  BSF    1A.0
.................... 			disable_interrupts(INT_TIMER0); 
04A0:  BCF    FF2.5
.................... 			estado = 0; 
04A2:  CLRF   1B
04A4:  CLRF   19
04A6:  BTFSC  FF2.7
04A8:  BSF    19.7
04AA:  BCF    FF2.7
.................... 			saida_onda(clr_output); 
04AC:  SETF   30
04AE:  RCALL  00AE
04B0:  BTFSC  19.7
04B2:  BSF    FF2.7
.................... 		} 
....................  
.................... 		if (write) { 
04B4:  BTFSS  1A.4
04B6:  BRA    04FE
.................... 			write = FALSE; 
04B8:  BCF    1A.4
.................... 			printf("%lu - %u\n\r", timer0cont++, estado); 
04BA:  MOVFF  1D,03
04BE:  MOVF   1C,W
04C0:  INCF   1C,F
04C2:  BTFSC  FD8.2
04C4:  INCF   1D,F
04C6:  MOVWF  24
04C8:  MOVFF  03,25
04CC:  MOVLW  10
04CE:  MOVWF  FE9
04D0:  MOVFF  03,27
04D4:  MOVFF  24,26
04D8:  RCALL  0232
04DA:  MOVLW  89
04DC:  MOVWF  FF6
04DE:  MOVLW  01
04E0:  MOVWF  FF7
04E2:  MOVLW  03
04E4:  MOVWF  26
04E6:  RCALL  0214
04E8:  MOVFF  1B,26
04EC:  MOVLW  1B
04EE:  MOVWF  27
04F0:  BRA    0336
04F2:  MOVLW  0A
04F4:  MOVWF  2F
04F6:  RCALL  0192
04F8:  MOVLW  0D
04FA:  MOVWF  2F
04FC:  RCALL  0192
.................... 		} 
.................... 	} 
04FE:  BRA    03FE
....................  
.................... 	return 0; 
0500:  MOVLW  00
0502:  MOVWF  01
.................... } 
0504:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
