CCS PCH C Compiler, Version 4.140, 22098               24-set-14 16:34

               Filename:   D:\Projetos\L298N\l298n.lst

               ROM used:   682 bytes (2%)
                           Largest free fragment is 32082
               RAM used:   38 (2%) at main() level
                           39 (3%) worst case
               Stack:     3 worst case (1 in main + 2 for interrupts)

*
0000:  GOTO   0188
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   012C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /* 
....................  * l298n.c 
....................  * 
....................  *  Created on: 22/09/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include<18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
.................... #list 
....................  
.................... #DEVICE ADC=10 
....................  
.................... #FUSES HS 
....................  
.................... #use delay(clock=15MHz) 
*
015E:  CLRF   FEA
0160:  MOVLW  24
0162:  MOVWF  FE9
0164:  MOVF   FEF,W
0166:  BZ    0184
0168:  MOVLW  04
016A:  MOVWF  01
016C:  CLRF   00
016E:  DECFSZ 00,F
0170:  BRA    016E
0172:  DECFSZ 01,F
0174:  BRA    016C
0176:  MOVLW  DC
0178:  MOVWF  00
017A:  DECFSZ 00,F
017C:  BRA    017A
017E:  NOP   
0180:  DECFSZ FEF,F
0182:  BRA    0168
0184:  GOTO   0274 (RETURN)
.................... //#use delay(clock=9MHz) 
.................... //#use rs232(xmit=PIN_C6, baud=9600) 
....................  
.................... #define debouce 100 
.................... //#define tmr0reg 0 
.................... //#define tmr0reg 59285 
.................... #define clr_output	255 
....................  
.................... #define inc 200 
....................  
.................... #define R PIN_C0 
.................... #define S PIN_C1 
.................... #define T PIN_C3 
....................  
.................... #define pin_sobe PIN_B0 
.................... #define pin_desce PIN_B1 
....................  
.................... short ctrl_bto = TRUE; 
.................... short bto_sobe; 
.................... short bto_desce; 
.................... short dir; 
.................... short write; 
.................... short ctrl_inc; 
....................  
.................... int estado; 
....................  
.................... long timer0cont; 
.................... long tmr0reg; 
.................... long adc; 
.................... long adcAux; 
....................  
.................... void saida_onda(int i_estado) { 
.................... 	switch (i_estado) { 
*
00AE:  MOVF   26,W
00B0:  XORLW  00
00B2:  BZ    00CA
00B4:  XORLW  01
00B6:  BZ    00D8
00B8:  XORLW  03
00BA:  BZ    00E6
00BC:  XORLW  01
00BE:  BZ    00F4
00C0:  XORLW  07
00C2:  BZ    0102
00C4:  XORLW  01
00C6:  BZ    0110
00C8:  BRA    011E
.................... 	case 0: 
.................... 		output_high(R); 
00CA:  BCF    F94.0
00CC:  BSF    F8B.0
.................... 		output_low(S); 
00CE:  BCF    F94.1
00D0:  BCF    F8B.1
.................... 		output_high(T); 
00D2:  BCF    F94.3
00D4:  BSF    F8B.3
.................... 		break; 
00D6:  BRA    012A
.................... 	case 1: 
.................... 		output_high(R); 
00D8:  BCF    F94.0
00DA:  BSF    F8B.0
.................... 		output_low(S); 
00DC:  BCF    F94.1
00DE:  BCF    F8B.1
.................... 		output_low(T); 
00E0:  BCF    F94.3
00E2:  BCF    F8B.3
.................... 		break; 
00E4:  BRA    012A
.................... 	case 2: 
.................... 		output_high(R); 
00E6:  BCF    F94.0
00E8:  BSF    F8B.0
.................... 		output_high(S); 
00EA:  BCF    F94.1
00EC:  BSF    F8B.1
.................... 		output_low(T); 
00EE:  BCF    F94.3
00F0:  BCF    F8B.3
.................... 		break; 
00F2:  BRA    012A
.................... 	case 3: 
.................... 		output_low(R); 
00F4:  BCF    F94.0
00F6:  BCF    F8B.0
.................... 		output_high(S); 
00F8:  BCF    F94.1
00FA:  BSF    F8B.1
.................... 		output_low(T); 
00FC:  BCF    F94.3
00FE:  BCF    F8B.3
.................... 		break; 
0100:  BRA    012A
.................... 	case 4: 
.................... 		output_low(R); 
0102:  BCF    F94.0
0104:  BCF    F8B.0
.................... 		output_high(S); 
0106:  BCF    F94.1
0108:  BSF    F8B.1
.................... 		output_high(T); 
010A:  BCF    F94.3
010C:  BSF    F8B.3
.................... 		break; 
010E:  BRA    012A
.................... 	case 5: 
.................... 		output_low(R); 
0110:  BCF    F94.0
0112:  BCF    F8B.0
.................... 		output_low(S); 
0114:  BCF    F94.1
0116:  BCF    F8B.1
.................... 		output_high(T); 
0118:  BCF    F94.3
011A:  BSF    F8B.3
.................... 		break; 
011C:  BRA    012A
.................... 	default: 
.................... 		output_low(R); 
011E:  BCF    F94.0
0120:  BCF    F8B.0
.................... 		output_low(S); 
0122:  BCF    F94.1
0124:  BCF    F8B.1
.................... 		output_low(T); 
0126:  BCF    F94.3
0128:  BCF    F8B.3
.................... 	} 
.................... } 
012A:  RETURN 0
....................  
.................... #INT_TIMER0 
.................... void isr_timer0() { 
....................  
.................... 	clear_interrupt(INT_TIMER0); 
012C:  BCF    FF2.2
.................... 	set_timer0(tmr0reg); 
012E:  MOVFF  1F,FD7
0132:  MOVFF  1E,FD6
....................  
.................... 	if (dir) { 
0136:  BTFSS  1A.3
0138:  BRA    0146
.................... 		estado++; 
013A:  INCF   1B,F
.................... 		if (estado > 5) 
013C:  MOVF   1B,W
013E:  SUBLW  05
0140:  BC    0144
.................... 			estado = 0; 
0142:  CLRF   1B
.................... 	} else { 
0144:  BRA    0152
.................... 		estado--; 
0146:  DECF   1B,F
.................... 		if (estado > 5) 
0148:  MOVF   1B,W
014A:  SUBLW  05
014C:  BC    0152
.................... 			estado = 5; 
014E:  MOVLW  05
0150:  MOVWF  1B
.................... 	} 
....................  
.................... 	saida_onda(estado); 
0152:  MOVFF  1B,26
0156:  RCALL  00AE
.................... } 
....................  
0158:  BCF    FF2.2
015A:  GOTO   0060
.................... int main(void) { 
*
0188:  CLRF   FF8
018A:  BCF    FD0.7
018C:  BSF    07.7
018E:  CLRF   FEA
0190:  CLRF   FE9
0192:  BSF    1A.0
0194:  BSF    FC1.0
0196:  BSF    FC1.1
0198:  BSF    FC1.2
019A:  BCF    FC1.3
....................  
.................... 	setup_adc(ADC_CLOCK_INTERNAL); 
019C:  BCF    FC1.6
019E:  BSF    FC2.6
01A0:  BSF    FC2.7
01A2:  BSF    FC1.7
01A4:  BSF    FC2.0
.................... 	setup_adc_ports(AN0); 
01A6:  BCF    FC1.0
01A8:  BSF    FC1.1
01AA:  BSF    FC1.2
01AC:  BSF    FC1.3
.................... 	set_adc_channel(0); 
01AE:  MOVLW  00
01B0:  MOVWF  01
01B2:  MOVF   FC2,W
01B4:  ANDLW  C7
01B6:  IORWF  01,W
01B8:  MOVWF  FC2
....................  
.................... 	setup_timer_0(T0_INTERNAL | T0_DIV_1); 
01BA:  MOVLW  88
01BC:  MOVWF  FD5
.................... 	set_timer0(tmr0reg); 
01BE:  MOVFF  1F,FD7
01C2:  MOVFF  1E,FD6
....................  
.................... 	setup_timer_2(T2_DIV_BY_1, 0xFF, 1); 
01C6:  MOVLW  00
01C8:  IORLW  04
01CA:  MOVWF  FCA
01CC:  MOVLW  FF
01CE:  MOVWF  FCB
....................  
.................... //	setup_ccp1(CCP_PWM); 
.................... 	setup_ccp1(CCP_OFF); 
01D0:  MOVLW  F0
01D2:  ANDWF  FBD,F
.................... 	set_pwm1_duty(512); 
01D4:  MOVLW  80
01D6:  MOVWF  FBE
01D8:  MOVF   FBD,W
01DA:  ANDLW  CF
01DC:  MOVWF  FBD
....................  
.................... 	enable_interrupts(GLOBAL); 
01DE:  MOVLW  C0
01E0:  IORWF  FF2,F
01E2:  CLRF   19
01E4:  BTFSC  FF2.7
01E6:  BSF    19.7
01E8:  BCF    FF2.7
....................  
.................... 	saida_onda(clr_output); 
01EA:  SETF   26
01EC:  RCALL  00AE
01EE:  BTFSC  19.7
01F0:  BSF    FF2.7
....................  
.................... 	while (TRUE) { 
....................  
.................... 		delay_us(10); 
01F2:  MOVLW  0B
01F4:  MOVWF  00
01F6:  DECFSZ 00,F
01F8:  BRA    01F6
01FA:  BRA    01FC
01FC:  NOP   
.................... 		adc = read_adc(); 
01FE:  BSF    FC2.2
0200:  BTFSC  FC2.2
0202:  BRA    0200
0204:  MOVFF  FC3,20
0208:  MOVFF  FC4,21
....................  
.................... 		if (adc != adcAux) { 
020C:  MOVF   22,W
020E:  SUBWF  20,W
0210:  BNZ   0218
0212:  MOVF   23,W
0214:  SUBWF  21,W
0216:  BZ    0246
.................... 			adcAux = adc; 
0218:  MOVFF  21,23
021C:  MOVFF  20,22
.................... //			tmr0reg = (long) 65535 / 1024 * adc; 
.................... 			set_pwm1_duty(adc); 
0220:  MOVFF  21,02
0224:  MOVFF  20,01
0228:  RRCF   02,F
022A:  RRCF   01,F
022C:  RRCF   02,F
022E:  RRCF   01,F
0230:  RRCF   02,F
0232:  MOVFF  01,FBE
0236:  RRCF   02,F
0238:  RRCF   02,W
023A:  ANDLW  30
023C:  MOVWF  00
023E:  MOVF   FBD,W
0240:  ANDLW  CF
0242:  IORWF  00,W
0244:  MOVWF  FBD
.................... 		} 
....................  
.................... 		bto_sobe = !input(pin_sobe); 
0246:  BSF    F93.0
0248:  BCF    1A.1
024A:  BTFSS  F81.0
024C:  BSF    1A.1
.................... 		bto_desce = !input(pin_desce); 
024E:  BSF    F93.1
0250:  BCF    1A.2
0252:  BTFSS  F81.1
0254:  BSF    1A.2
....................  
.................... 		if (bto_sobe ^ bto_desce) { 
0256:  MOVLW  00
0258:  BTFSC  1A.1
025A:  MOVLW  01
025C:  MOVWF  25
025E:  MOVLW  00
0260:  BTFSC  1A.2
0262:  MOVLW  01
0264:  XORWF  25,W
0266:  BZ    0288
.................... 			if (ctrl_bto) { 
0268:  BTFSS  1A.0
026A:  BRA    0286
.................... 				ctrl_bto = FALSE; 
026C:  BCF    1A.0
.................... 				delay_ms(debouce); 
026E:  MOVLW  64
0270:  MOVWF  24
0272:  BRA    015E
.................... 				clear_interrupt(INT_TIMER0); 
0274:  BCF    FF2.2
.................... 				enable_interrupts(INT_TIMER0); 
0276:  BSF    FF2.5
.................... 				dir = bto_sobe; 
0278:  BCF    1A.3
027A:  BTFSC  1A.1
027C:  BSF    1A.3
.................... 				setup_ccp1(CCP_PWM); 
027E:  BCF    F94.2
0280:  BCF    F8B.2
0282:  MOVLW  0C
0284:  MOVWF  FBD
.................... 			} 
.................... 		} else if (!ctrl_bto) { 
0286:  BRA    02A6
0288:  BTFSC  1A.0
028A:  BRA    02A6
.................... 			ctrl_bto = TRUE; 
028C:  BSF    1A.0
.................... 			disable_interrupts(INT_TIMER0); 
028E:  BCF    FF2.5
.................... 			estado = 0; 
0290:  CLRF   1B
0292:  CLRF   19
0294:  BTFSC  FF2.7
0296:  BSF    19.7
0298:  BCF    FF2.7
.................... 			saida_onda(clr_output); 
029A:  SETF   26
029C:  RCALL  00AE
029E:  BTFSC  19.7
02A0:  BSF    FF2.7
.................... 			setup_ccp1(CCP_OFF); 
02A2:  MOVLW  F0
02A4:  ANDWF  FBD,F
.................... 		} 
.................... 	} 
02A6:  BRA    01F2
....................  
.................... 	return 0; 
02A8:  MOVLW  00
02AA:  MOVWF  01
.................... } 
02AC:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
